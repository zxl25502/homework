317:
You are given an m x n grid grid of values 0, 1, or 2, where:
each 0 marks an empty land that you can pass by freely,
each 1 marks a building that you cannot pass through, and
each 2 marks an obstacle that you cannot pass through.
You want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.
Return the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return -1.
The total travel distance is the sum of the distances between the houses of the friends and the meeting point.
The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

private void bfs(int[][] matrix, int i(startingRow), int j(startingCol), int[][] distance) {
    Queue<Integer> queue = new LinkedList<>();
    queue.offer(i * col + j);
    boolean[][] visited = new boolean[][];
    visited[i][j] = true;
    int minLen = 0;
    while (!queue.isEmpty()) {
        cur = queue.poll();
        int ii = cur / col, jj = cur % col;
        cost[ii][jj] += minLen;
        for (int[] dir : DIRECTIONS) {
            int iIdx = ii + dir[0], jIdx = jj + dir[1];
            if (iIdex >= 0 && iIdx < row && jIdx >= 0 && jIdx < col && matrix[iIdx][jIdx] == 0 && !visted[iIdex][jIdex]) {
                queue.offer(iIdex * col + jIdex);
                visited[iIdex][jIdex];
            }
        }
        minLen++;
    }
}

public int buildings (int[][] matrix) {
    int[][]cost = new int [row][col];
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            if (matrix[i][j] == 1) {
                bfs(matrix, i, j, cost);
            }
        }
    }
    int min = Integer.MAXVAL;
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            if(matrix[i][j] == 0) {
                min = Math.min(min, cost[][]);
            }
        }
    }
    return min;
}



296:
Given an m x n binary grid grid where each 1 marks the home of one friend, return the minimal total travel distance.
The total travel distance is the sum of the distances between the houses of the friends and the meeting point.
The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

LC417
pacific --> points can get to pacific (M*N)
atlantic --> points can get to atlantic (M*N)

private void bfs (int[][] matrix, Queue<Integer> queue, boolean[][] thisBoard, boolean[][] otherBoard, List<List<Integer>> result) {
    while(!queue.isEmpty()) {
        //can ignore size = queue.size();
        int cur = queue.poll();
        int i = cur/col, j = cur%col;
        if(thatBoard[i][j]) {res.add(Arrays.asList(i,j))}
        for (dir : DIR) {
            int ii = i + dir[0], jj = j+dir[1];
            if (ii >= 0 && ii < row && jj >= 0 && jj< col && !thisBoard[ii][jj] && matrix[i][j] <= matrix[ii][jj]) {
                queue.offer(ii * col + jj);
                thisBoard[ii][jj] = true;
            }
        }
    }
}

public List<List<Integer>> LC296 (int[][] matrix) {
    Queue<Integer> queue = ...;
    boolean[][] pacific = new boolean[row][col];
    boolean[][] atlantic = new boolean[row][col];

    List<List<Integer>> res = ...;

    //pacific first
    loadPacific (matrix, queue, pacific);
    bfs(matrix, queue, pacific, atlantic, res);
    //atlantic
    loadAtlantic(matrix, queue, atlantic);
    bfs (matrix, queue, atlantic, pacific, res);
    return res;
}

T.C M*N
S.C M*N




